// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Monitoria.Infra.Data.Contexts;

namespace Monitoria.Infra.Data.Migrations.PetCare
{
    [DbContext(typeof(PetCareContext))]
    [Migration("20190716174613_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("PetCare")
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Monitoria.Domain.PetCare.Entities.AnimalPetCare", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<int>("Age")
                        .HasColumnName("Age");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("Name")
                        .HasMaxLength(40);

                    b.Property<int>("Specie")
                        .HasColumnName("Specie");

                    b.HasKey("Id");

                    b.ToTable("AnimalPetCare");
                });

            modelBuilder.Entity("Monitoria.Domain.PetCare.Entities.PetServices", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active")
                        .HasColumnName("Active");

                    b.Property<int>("Category")
                        .HasColumnName("Category");

                    b.Property<string>("CheckList")
                        .IsRequired()
                        .HasColumnName("CheckList")
                        .HasMaxLength(200);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("Description")
                        .HasMaxLength(50);

                    b.Property<decimal>("ServiceValue")
                        .HasColumnName("ServiceValue")
                        .HasColumnType("decimal(5,2)");

                    b.HasKey("Id");

                    b.ToTable("PetServices");
                });

            modelBuilder.Entity("Monitoria.Domain.PetCare.Entities.Professional", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("JobPosition")
                        .HasColumnName("JobPosition");

                    b.HasKey("Id");

                    b.ToTable("Professional");
                });

            modelBuilder.Entity("Monitoria.Domain.PetCare.Entities.ProfessionalServicesAnimal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("EndDate");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnName("Note")
                        .HasMaxLength(150);

                    b.Property<Guid>("PetServiceId");

                    b.Property<Guid>("RowAnimalCareId");

                    b.Property<DateTime>("StartDate")
                        .HasColumnName("StartDate");

                    b.Property<Guid>("professionalId");

                    b.HasKey("Id");

                    b.HasIndex("PetServiceId");

                    b.HasIndex("RowAnimalCareId");

                    b.HasIndex("professionalId");

                    b.ToTable("ProfessionalServicesAnimal");
                });

            modelBuilder.Entity("Monitoria.Domain.PetCare.Entities.RowAnimalCare", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("ValueTotal")
                        .HasColumnName("ValueTotal")
                        .HasColumnType("decimal(5,2)");

                    b.HasKey("Id");

                    b.ToTable("RowAnimalCare");
                });

            modelBuilder.Entity("Monitoria.Domain.PetCare.Entities.AnimalPetCare", b =>
                {
                    b.HasOne("Monitoria.Domain.PetCare.Entities.RowAnimalCare", "RowAnimalCare")
                        .WithOne("AnimalPetCare")
                        .HasForeignKey("Monitoria.Domain.PetCare.Entities.AnimalPetCare", "Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Monitoria.Domain.PetCare.Entities.Professional", b =>
                {
                    b.OwnsOne("Monitoria.Domain.Shared.ValueObjects.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("ProfessionalId");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnName("AddressCity")
                                .HasMaxLength(50);

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasColumnName("AddressCountry")
                                .HasMaxLength(50);

                            b1.Property<string>("Neighborhood")
                                .IsRequired()
                                .HasColumnName("AddressNeighborhood")
                                .HasMaxLength(50);

                            b1.Property<string>("Number")
                                .IsRequired()
                                .HasColumnName("AddressNumber");

                            b1.Property<string>("State")
                                .IsRequired()
                                .HasColumnName("AddressState")
                                .HasMaxLength(50);

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasColumnName("AddressStreet")
                                .HasMaxLength(50);

                            b1.Property<string>("ZipCode")
                                .IsRequired()
                                .HasColumnName("AddressZipCode")
                                .HasMaxLength(8);

                            b1.HasKey("ProfessionalId");

                            b1.ToTable("Professional","PetCare");

                            b1.HasOne("Monitoria.Domain.PetCare.Entities.Professional")
                                .WithOne("Address")
                                .HasForeignKey("Monitoria.Domain.Shared.ValueObjects.Address", "ProfessionalId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("Monitoria.Domain.Shared.ValueObjects.Document", "Document", b1 =>
                        {
                            b1.Property<Guid>("ProfessionalId");

                            b1.Property<string>("Number")
                                .IsRequired()
                                .HasColumnName("DocNumber")
                                .HasMaxLength(50);

                            b1.Property<int>("Type")
                                .HasColumnName("DocType");

                            b1.HasKey("ProfessionalId");

                            b1.ToTable("Professional","PetCare");

                            b1.HasOne("Monitoria.Domain.PetCare.Entities.Professional")
                                .WithOne("Document")
                                .HasForeignKey("Monitoria.Domain.Shared.ValueObjects.Document", "ProfessionalId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("Monitoria.Domain.Shared.ValueObjects.Email", "Email", b1 =>
                        {
                            b1.Property<Guid>("ProfessionalId");

                            b1.Property<string>("Address")
                                .IsRequired()
                                .HasColumnName("EmailAddress")
                                .HasMaxLength(60);

                            b1.HasKey("ProfessionalId");

                            b1.ToTable("Professional","PetCare");

                            b1.HasOne("Monitoria.Domain.PetCare.Entities.Professional")
                                .WithOne("Email")
                                .HasForeignKey("Monitoria.Domain.Shared.ValueObjects.Email", "ProfessionalId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("Monitoria.Domain.Shared.ValueObjects.Name", "Name", b1 =>
                        {
                            b1.Property<Guid>("ProfessionalId");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasColumnName("FirstName")
                                .HasMaxLength(50);

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasColumnName("LastName")
                                .HasMaxLength(50);

                            b1.HasKey("ProfessionalId");

                            b1.ToTable("Professional","PetCare");

                            b1.HasOne("Monitoria.Domain.PetCare.Entities.Professional")
                                .WithOne("Name")
                                .HasForeignKey("Monitoria.Domain.Shared.ValueObjects.Name", "ProfessionalId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("Monitoria.Domain.PetCare.Entities.ProfessionalServicesAnimal", b =>
                {
                    b.HasOne("Monitoria.Domain.PetCare.Entities.PetServices", "PetService")
                        .WithMany("AnimailServices")
                        .HasForeignKey("PetServiceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Monitoria.Domain.PetCare.Entities.RowAnimalCare", "RowAnimalCare")
                        .WithMany("AnimailServices")
                        .HasForeignKey("RowAnimalCareId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Monitoria.Domain.PetCare.Entities.Professional", "Professional")
                        .WithMany("AnimailServices")
                        .HasForeignKey("professionalId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
